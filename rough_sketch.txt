# modules

1. implement verlet.py: defines the verlet algorithm, does nothing on its own, takes data from and returns data for next iteraton
2. test module for throw: import verlet.py and use function to simulate throw (ex. 4)
3. first MD simulation: create initial data, import verlet.py to compute, write data to array and visualize movement of particles with time
	-> write in a way so [5] can import functions with added gravity and new boundary conditions
4. diffusion coefficient: takes data from [3], computes diff coefficient and visualizes arrhenius-plot
5. second MD simulation: (copy of [3]) or ideally imports functions from [3] to compute again with gravity added, new boundary conditions
	-> in addition to [3], computes particle density and average velocity for different distances from heated plate, visualizes time evolution of parameters








#probably ignore this

#to do

1. create list of 100 [xi,yi] random with abs(xi) < box length > abs(yi)
2. create list of 100 [dxi,dyi] maxwell-distribution and substract total sum([dxi,dyi])/100 from each value to get vanishing total momentum while retaining accurate velocity distribution
3. create combined statesList=[[xi,yi,dxi,dyi],[xj,yj,dxj,dyj],...]
4. define interaction according to leonard-jones-potential for use in modules (3) and (5)
5. create new arrays with checkpoints to compute diffusion coefficient
